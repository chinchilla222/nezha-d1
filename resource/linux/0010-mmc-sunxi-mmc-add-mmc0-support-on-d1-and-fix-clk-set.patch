From d5f54539f74eceb842f2b24aeacd547ef5517470 Mon Sep 17 00:00:00 2001
From: lixiang <lixiang@allwinnertech.com>
Date: Thu, 17 Jun 2021 13:55:15 +0800
Subject: [PATCH 10/11] mmc:sunxi-mmc:add mmc0 support on d1 and fix clk
 setting

Add mmc0 support on allwinner d1 nezha board,fix clock set
on new timing mode,increase speed to 50mhz by change clock
source to pll

Signed-off-by: lixiang <lixiang@allwinnertech.com>
---
 drivers/mmc/host/sunxi-mmc.c | 78 ++++++++++++++++++++++++++++++++++++--------
 1 file changed, 65 insertions(+), 13 deletions(-)

diff --git a/drivers/mmc/host/sunxi-mmc.c b/drivers/mmc/host/sunxi-mmc.c
index 2702736..ec96a2c 100644
--- a/drivers/mmc/host/sunxi-mmc.c
+++ b/drivers/mmc/host/sunxi-mmc.c
@@ -756,6 +756,49 @@ static int sunxi_mmc_clk_set_phase(struct sunxi_mmc_host *host,
 	return 0;
 }
 
+/*Default clock source is 24M,if we want clock over 24M,We should use
+ *pll as clock soure
+ */
+static int sunxi_clk_get_parent(struct sunxi_mmc_host *host,  u32 clock)
+{
+	struct clk *sclk = NULL;
+	char *sclk_name = NULL;
+	u32 src_clk = 0;
+	s32 err = 0;
+	struct device *dev = mmc_dev(host->mmc);
+
+	sclk = clk_get(dev, "osc24m");
+	sclk_name = "osc24m";
+
+	if (IS_ERR(sclk)) {
+		dev_err(mmc_dev(host->mmc), "Error to get source clock %s\n",
+				sclk_name);
+		return -1;
+	}
+
+	src_clk = clk_get_rate(sclk);
+	if (clock > src_clk) {
+		clk_put(sclk);
+		sclk = clk_get(dev, "pll_periph");
+		sclk_name = "pll_periph";
+	}
+	if (IS_ERR(sclk)) {
+		dev_err(mmc_dev(host->mmc), "Error to get source clock %s\n",
+				sclk_name);
+		return -1;
+	}
+
+	err = clk_set_parent(host->clk_mmc, sclk);
+	if (err) {
+		dev_err(mmc_dev(host->mmc), "set parent failed\n");
+		clk_put(sclk);
+		return -1;
+	}
+	clk_put(sclk);
+	return 0;
+}
+
+
 static int sunxi_mmc_clk_set_rate(struct sunxi_mmc_host *host,
 				  struct mmc_ios *ios)
 {
@@ -774,20 +817,22 @@ static int sunxi_mmc_clk_set_rate(struct sunxi_mmc_host *host,
 	if (!ios->clock)
 		return 0;
 
-	/*
-	 * Under the old timing mode, 8 bit DDR requires the module
-	 * clock to be double the card clock. Under the new timing
-	 * mode, all DDR modes require a doubled module clock.
-	 *
-	 * We currently only support the standard MMC DDR52 mode.
-	 * This block should be updated once support for other DDR
-	 * modes is added.
+	/* When use new timings,all speed mode requires a doubled module clock
+	 * if speed mode is ddr,requires a four times module clock
+	 * When use old timings,only 8 bit ddr requires a doubled module clock
 	 */
-	if (ios->timing == MMC_TIMING_MMC_DDR52 &&
-	    (host->use_new_timings ||
-	     ios->bus_width == MMC_BUS_WIDTH_8)) {
-		div = 2;
+	if (host->use_new_timings) {
 		clock <<= 1;
+		if (ios->timing == MMC_TIMING_MMC_DDR52) {
+			div = 2;
+			clock <<= 1;
+		}
+	} else {
+		if (ios->timing == MMC_TIMING_MMC_DDR52 &&
+				(ios->bus_width == MMC_BUS_WIDTH_8)) {
+			div = 2;
+			clock <<= 1;
+		}
 	}
 
 	if (host->use_new_timings && host->cfg->ccu_has_timings_switch) {
@@ -798,7 +843,7 @@ static int sunxi_mmc_clk_set_rate(struct sunxi_mmc_host *host,
 			return ret;
 		}
 	}
-
+	sunxi_clk_get_parent(host, clock);
 	rate = clk_round_rate(host->clk_mmc, clock);
 	if (rate < 0) {
 		dev_err(mmc_dev(mmc), "error rounding clk to %d: %ld\n",
@@ -1431,6 +1476,13 @@ static int sunxi_mmc_probe(struct platform_device *pdev)
 				     "allwinner,sun50i-h5-emmc"))
 		mmc->caps      |= MMC_CAP_1_8V_DDR | MMC_CAP_3_3V_DDR;
 
+#ifndef CONFIG_REGULATOR
+	/*Because some platform has no regulator,so we add it manually*/
+	mmc->ocr_avail =
+	    MMC_VDD_28_29 | MMC_VDD_29_30 | MMC_VDD_30_31 | MMC_VDD_31_32 |
+	    MMC_VDD_32_33 | MMC_VDD_33_34;
+	dev_info(&pdev->dev, "set host ocr manually\n");
+#endif
 	ret = mmc_of_parse(mmc);
 	if (ret)
 		goto error_free_dma;
-- 
2.7.4

